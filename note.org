* 摘抄
** 学习数学的方法
- 原理篇：
   1. 学习数学在于构造自己的体系（数学世界观），你自己不主动，只是往里面硬塞东西是没用的。先把初心找回来吧。心理上学习有一个大敌：害怕努力！为什么害怕努力？因为人无法面对即使自己尽了全力仍然失败的结果。如果我不尽全力，失败也有一个好借口，这是万万不可的，可是这是很多人不努力的根本原因。做不出问题不要觉得自己笨，因为智力也好都是浮动的。要把失败归结于自己的思考本事，不要给自己贴标签，伤害自己的感情。
   2. 画一个小圆而不是大圆（先求精再求广）。人类的大脑的一个基本特点是重视联系，一个新的东西只有和别的东西结合的越深才能更好地被理解和记忆。碰到新的概念和结果要一步一个脚印写得透透的。这个概念为什么会出现？它和旧的概念和结果是什么关系？要思考到什么程度？最好的就是，如果换你来你也得这样定义！思考这些问题的记得动笔，动笔的意义在于刺激你思考。而且人类的大脑像cpu而不是硬盘，擅长处理不擅长记忆，写在纸上吧！不要装逼！把一个个结果和定理在脑海中编织成一个网，去思考网上任意两点之间的联系，联系越大，你的理解越深。你也越难忘记这些结果，不会发生考完试就还给老师的事情。记住！数学和其它的专业不同，前后课程的联系很大，如果你基础不牢，后面地动山摇。


- 方法篇：
  1. 做笔记：前面我提过学习数学要构造自己的体系，这里的笔记就是你脑海中体系的具体化，说白了，这就是你写给自己的教科书。不是简单的抄录书本，也不是只是自己对一两个问题的理解。而是要写得完备，有一个比较清晰的体系。我推荐使用onennote等电子笔记来完成这项工作，这样方便修改和保存。知乎上也有相关的问题，你可以参考。如何充分利用 OneNote，发挥它的全部价值和潜力？ - 笔记类应用
  2. 重复和熟悉。
     - 冯 诺伊曼： 年轻人，在数学里，你不能真正理解一个东西，习惯它吧。
     - 希尔伯特： 5遍，起码5遍！
     - 孔子：学而时习之，不亦乐乎。如果你学某个新的数学工具（概念，定理），你要不断的使用它。最简单的方法就是做题，我推荐作大数学家的一些习题集，这些习题本身就是会帮助你构造体系。理解不同概念之间的联系。我自己做的是方向和分析pde有关，所以我只推荐相关的教材和习题：pde：先做evans，然后再去搞定trudinger，pde里面有些东西懂不懂泛函分析都能看（极值原理这些东西），有些必学先学泛函分析。起码学过sobolev space再说，更别提什么复／实插入空间了。
     - 分析：rudin三本书足够了，主要把精力放在第一本《数学分析原理》和第二本《实分析和复分析》。第三本太不人道了，我其实不太推荐。如果真的学一些实用的泛函分析第二本就够了，我不推荐rudin，从拓扑向量空间讲起实在是呵呵.
  3. 不要太拘泥于教材，既然是构筑体系，那么要以我为主，什么书你觉得最合你的心意，你就选那个教材。把它的想法吸收进你的体系。不停的修改你的体系，慢慢的体系就能融合进你的头颅了。当然了，体系有好有坏，我推荐的书是个人感觉很清新的。
  4. 不停的使用你的体系去解决问题，不停的使用新的概念，熟悉它，把它变成你的某种本能。
  5. 制定计划和执行：数学是需要天天学月月学年年做的事情。所以要养成每天都学的好习惯。按照自己的时间表学习。我推荐你看《习惯的力量》等靠谱的书来帮你养成习惯。当然了，你真有动力，这些都不需要。
** 机器学习相关从业者如何兼顾理论与工程能力
理论注重的是学科中各个知识点的大一统，将各种散乱的算法、现象、技巧来归结到一张大网中。这样在新理论、新技术到来的时候，你可以很快的从这张大网中get到新理论、新技术的本质，并将这些创新纳入你的大网，并且可以反思这张网，归结出其中的规律或者疑问，以此为突破点来“灵光一现”出创新的idea，说不定就是一篇轰动学术界的论文。

而工程，或者说用于实现想法的代码，则是对某个理论点的细节化实现。虽然在理论上只需要几个数学公式就描述清楚了，但是用代码实现的话往往充斥着大量细节需要仔细斟酌，一不小心就是一个bug。当然了，一些太过复杂的算法，如最优化算法，一般都在各种优秀的科学计算库里封装好了，调调API就可以了。但是每个工程总是有一些数学细节和小trick需要自己去实现或优化的。在工程里遇到的问题，有时也可以抽象成理论，反思一下或许也是一个改良模型的idea，发个小论文也行呀。

走上正轨是在上研究生以后，深刻的认识到在这个研究方向上，理论与工程缺一不可。于是摸索出如下自认为比较舒服、效率比较高、不易造成理论或工程断层的方法或原则：

 
- 精力划分：理论与工程基本7/3分。

- 编程语言：一门精，一门辅，剩下的备用。在完全切入这个领域之前，尽量避开C、C++、Java等编程范式或者说编程语言的感觉比较浓厚的编程语言（这句话讲的好奇怪），以防过多的编程语言细节干扰了你对算法的宏观理解，除非已经非常精通那门语言，且确保那门语言有该领域成熟的库。小夕首推精python，辅C++，备用matlab和java。

- 如何入手一个新算法/新模型：
  1) 除非工程任务压得紧，否则在学习一个新算法/新模型时尽量先从数学角度理解透，纳入理论的大网下，再去看形式化的算法过程。

  2) 而形式化的算法过程要尽量与数学过程对应起来，如果感觉断层大，要尽量试图找到断层。如果实在找不出，或者精力少，则一定要记下这个断层。

  3) 之后就可以用代码去实现形式化的算法了，在这个过程中，就不要再过多纠结它的数学原型了，而是要试图从“感性意义上”去理解算法过程，并且用代码去实现这个感性的算法过程。

- 如何入手一个新领域：比如你一直在做分类，然后要去做序列标注/预测相关的东西。这时就不是看一个新算法那么简单了，而是要尽量找到相关领域的综述性论文，或者比较权威的书籍，将这个新领域的各种算法概览、解决的任务类型、解决问题的一般化框架/流程给做到了然于胸，然后再去扎进其中具体的算法里。

- 如何应对紧迫的工程任务：

  1) 此时千万不要做一个“完美主义者”（这里是超级贬义词）。比如工程需要，老师让对该领域一无所知的你赶紧实现一个机器学习模型，可不要先看微积分、线代、概率统计，再看机器学习算法原理巴拉的。既没有必要又耽误了任务。

  2) 直接按照工程任务的标准找到符合该标准的最成熟的模型/算法，然后去找实现了该算法的库。如果连库都没有，说明要么你找的有问题，要么确实需要很新的算法去解决，那就stackOverFlow寻找新思路+github找代码呀。算法原理什么的，甚至算法的工作流程什么的，不出问题就不用细看，只粗看懂这个算法用在哪里，输入是什么，输出是什么，有哪些参数需要调，大神们说怎么调就可以了，实在不知道怎么调就交叉验证啊（只要数据量不是特别大）。

  3) 快速入门一个库或者框架时，切记别上来就啃工具书的第一页。官网的《get start》往往是最好的入门资料，别人写的书籍虽然看起来靠谱、厚实，但是别忘了，书籍作者也仅仅是个使用者，而不是开发这个工具的人，他理解的再深也难免有偏差甚至偏见，最要命的是，这些书籍的作者往往默认为你有一大堆的时间去品他的书，实际上你哪有这些时间啊。因此，官网的《get start》之后，一般对这个新的库或框架就有大概轮廓了，这时边着手将其用在你的工程任务上，边结合官网进一步的指导文档（如果有的话）进一步学习。有条件的话备一本大而全的工具书，没条件的话官网的API文档也足矣，用到哪里查哪里。

  4) 完成工程任务后，趁热打铁，记录下本任务过程中遇到的所有的黑匣子。如果黑匣子特别多，就先不要管了，按照第4条如何切入新领域的过程做。如果已对该领域有一定了解，则不妨从这些黑匣子算法或黑匣子框架入手，蔓延开自己的理论大网（经工程练手后的黑匣子会激发特别强的求知欲，往往理解和记忆更加深刻）

* 感悟
** 为什么一直以来我都在浪费时间
一直以来我都有一种说明都不会的焦虑，然后就看似很努力的看了很多视频，学了很多东西，但都太急功近利了。
看完视频就匆匆忙忙取看下一个，以为看完自己就能掌握了。从来没有问自己内心，视频里面的内容掌握没有。
当场都没有怎么掌握，过来几天肯定都全忘干净了。所以花费的时间很多，但都是白费。
养成良好的自学习惯。学完一个东西看自己能不能复述出来，判断自己掌握的等级，然后再不同程度取重复它。直到确定以及可以一段时间牢固掌握。
不学完一个知识点，就不要往下，宁可少学一点，也要掌握得牢一点。
** 收集了那么多资料，没有怎么看
一种焦虑是想把好东西都收集起来，然后就可以心安了。然后资料就忘在脑后，再也不看。
既然觉得资料好，为什么不多花点时间将资料记录下来，做好标记，然后安排特定的时间看？
恩，以后就这样搞。
** 怎样做项目
今天上课，老师讲了一个让人深刻启发的故事，多么像自己以前发生的事情的翻版啊！
老师比较了一个清华的同学和另外学校同学的学生做的cuda并行计算的项目
清华的边学边看原版技术文档，遇到问题与瓶颈，积极查看各种论文相关的解决办法，然后在各种贴子上发问，很好的完成了实验效果，在很短的时间内掌握了知识，并给了老师很大的启发。
另一个同学英文不好，英文文档不愿意看，只看中文文档，做不出来就拼命硬做，也不想办法解决，也不应用新的技术与方法，花费了一年时间才掌握老师用了一个月的知识。
自己以前也和第二个同学一样，看似很努力，其实是白费功夫，这个例子要永远记得，时刻提醒自己。加油
** 怎样学计算机
老师说一般工科最终拼的都是数学，没有数学你做什么工科？要重视数学。
不要太关注与技术的细节，把基础搭牢固，学相关领域都快。目前准备学习的基础有统计与优化课程
* 突发奇想
* 阅览的资料
- [ ] 
* 重复的内容
** 本周要重复的
**  本月要重复的
* 临时安排事项
** CANCELLED 待会儿看一下边缘世界 rimworld                        :CANCELLED:
   CLOSED: [2018-04-08 Sun 21:55] SCHEDULED: <2018-04-07 Sat 17:32>
   - State "CANCELLED"  from "TODO"       [2018-04-08 Sun 21:55] \\
     bu wanl
 
